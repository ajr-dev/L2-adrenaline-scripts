unit  uLocation;

interface

uses
  SysUtils, Classes, uFunctions, uSettings;

(*---------------- Types ------------------------------------------------------*)
type
  TCity = (DWARVEN = 0, ORC = 1, DARK_ELVEN = 2, ELVEN = 3, TALKING_ISLAND = 4,
    HEINE = 5, DION = 6, GIRAN = 7, ADEN = 8, GODDARD = 9, GLUDIO = 10, GLUDIN = 11,
    SHTUTTGART = 12, RUNE = 13, OREN = 14, HUNTER = 15, NON_CITY = 16);
  TFarmZone = record
    range: integer;
    mili: integer;
  end;

  TCity2 = record
    //Enum: TCity;
    //ID: integer;
    Name: String;
    gateKeeperID: integer;
    //supplyManagerID: integer;
    //newbieBufferID: integer;
    //pathToBuffer: DimensionArray;
    //pathToSupply: DimensionArray;
    GateKeepersString: String;
  end;

(*-------------- Constants ----------------------------------------------------*)
const
  TPDelayTime = 5 * 1000; // Time to wait after teleporting, change according to your computer
  AdventurersScrollOfScape: Integer = 10650;
  ScrollOfScape: Integer = 736;
  GludinGK: Integer = 30320;

  DWARVEN2: TCity2 = (Name: 'dwarven village'; gateKeeperID: 30540; GateKeepersString: 'gludio,schuttgart,"dark elf village","talking island","elf village","orc village","mithril mines","abandoned coal mines","eastern mining zone","western mining zone"');
  ORC2: TCity2 = (Name: 'orc village'; gateKeeperID: 30576; GateKeepersString: 'gludio,schuttgart,"dark elf village","dwarven village","talking island","elf village","immortal plateau","immortal plateau south","fozen waterfall"');
  DARK_ELVEN2: TCity2 = (Name: 'dark elf village'; gateKeeperID: 30134; GateKeepersString: 'gludio,"dwarven village","talking island","orc village","dark forest","swampland","spider nest","neutral zone"');
  ELVEN2: TCity2 = (Name: 'elf village'; gateKeeperID: 30146; GateKeepersString: 'gludio,"dwarven village","talking island","orc village","elven forest","elven fortress","neutral zone"');
  TALKING_ISLAND2: TCity2 = (Name: 'talking island'; gateKeeperID: 30006; GateKeepersString: 'gludin,"dark elf village","dwarven village","elf village","orc village","elven ruins","singing waterfall","northen territory","obelisk of victory"');
  HEINE2: TCity2 = (Name: 'heine'; gateKeeperID: 30899; GateKeepersString: 'giran,oren,dion,aden,goddard,rune,schuttgart,gludio,"giran harbor","field of silence","field of whispers","alligator island","garden of eva"');
  DION2: TCity2 = (Name: 'dion'; gateKeeperID: 30059; GateKeepersString: 'giran,heine,gludio,goddard,rune,schuttgart,aden,oren,"cruma marshland","cruma tower","fortress of resistance","plains of dion","bee hive","tanor canyon"');
  GIRAN2: TCity2 = (Name: 'giran'; gateKeeperID: 30080; GateKeepersString: 'oren,heine,dion,goddard,rune,schuttgart,gludio,aden,"giran harbor","hardins private academy","dragon valley","antharas lair","devils isle","breka stronghold"');
  ADEN2: TCity2 = (Name: 'aden'; gateKeeperID: 30848; GateKeepersString: 'goddard,oren,giran,heine,schuttgart,dion,gludio,rune,"hunters village","coliseum","forsaken plains","seal of shilen","forest of mirrors","blazing swamp","field of massacre","ancient battleground","silent valley","tower of insolence"');
  GODDARD2: TCity2 = (Name: 'goddard'; gateKeeperID: 31275; GateKeepersString: 'gludio,giran,dion,rune,heine,schuttgart,aden,oren,"varka","ketra","hot springs","wall of argos","monastery of silence"');
  GLUDIO2: TCity2 = (Name: 'gludio'; gateKeeperID: 30256; GateKeepersString: 'schuttgart,heine,aden,oren,dion,goddard,giran,rune,gludin,"elf village","dark elf village","dwarven village","orc village","ruins of agony","ruins of despair","ant nest","windawood manor"');
  GLUDIN2: TCity2 = (Name: 'gludin'; gateKeeperID: GludinGK; GateKeepersString: 'gludio,"talking island","elf village","dark elf village","dwarven village","orc village","langk lizardman dwellings","windmill hill","fellmere harvesting grounds","forgotten temple","orc barracks","windy hill",wasteland,"red rock ridge"');
  SHTUTTGART2: TCity2 = (Name: 'schuttgart'; gateKeeperID: 31964; GateKeepersString: 'rune,goddard,aden,oren,heine,giran,dion,gludio,"orc village","dwarven village","den of evil","plunderous plains","frozen labyrinth","crypts of disgrace","pavel ruins"');
  RUNE2: TCity2 = (Name: 'rune'; gateKeeperID: 31320; GateKeepersString: 'goddard,gludio,giran,dion,heine,schuttgart,aden,oren,"wild beast pastues","valley of saints","forest of the dead","swamp of screams","monasterty of silence"');
  OREN2: TCity2 = (Name: 'oren'; gateKeeperID: 30177; GateKeepersString: 'aden,giran,rune,goddard,heine,dion,schuttgart,gludio,"ivory tower","hunters village","hardins private academy","skyshadow meadow","plains of the lizardmen","outlaw forest","sea of spores"');
  HUNTER2: TCity2 = (Name: 'hunters village'; gateKeeperID: 30233; GateKeepersString: 'aden,oren,"hardins private academy","enchanted valley south","enchanted valley north","forest of mirrors"');

  TCities : array[0..16] of TCity = (DWARVEN, ORC, DARK_ELVEN, ELVEN, TALKING_ISLAND,
    HEINE, DION, GIRAN, ADEN, GODDARD, GLUDIO, GLUDIN, SHTUTTGART, RUNE, OREN, HUNTER, NON_CITY);
  GkDlg  = 'Weird text';  // TODO: change this

  TCities2 : array[0..15] of TCity2 = (DWARVEN2, ORC2, DARK_ELVEN2, ELVEN2, TALKING_ISLAND2,
    HEINE2, DION2, GIRAN2, ADEN2, GODDARD2, GLUDIO2, GLUDIN2, SHTUTTGART2, RUNE2, OREN2, HUNTER2);

  CityNames: array[0..15] of string = ('dwarven village','orc village','dark elf village','elf village','talking island',
    'heine','dion','giran','aden','goddard','gludio','gludin','schuttgart','rune','oren','hunters village');

  GatekeeperNames: array[0..15] of string = ('', '', '', '', '', '', '', '', '', '', '', 'Richlin', '', '', '', '');

  // IDs of the Gatekeepers
  GateKeepers: array[0..15] of integer = (30540, 30576, 30134, 30146, 30006,
    30899, 30059, 30080, 30848, 31275, 30256, GludinGK, 31964, 31320, 30177, 30233);

{
--------------------------------------------------------------------------------
  Array with all the locations to which the gatekeeper of a city can teleport
  The gatekeepersString share the same index as it's corresponding city
--------------------------------------------------------------------------------
}
  GateKeepersStrings: array[0..15] of string = (
    'gludio,schuttgart,"dark elf village","talking island","elf village","orc village","mithril mines","abandoned coal mines","eastern mining zone","western mining zone"',  // Dwarven Village
    'gludio,schuttgart,"dark elf village","dwarven village","talking island","elf village","immortal plateau","immortal plateau south","fozen waterfall"',  // Orc Village
    'gludio,"dwarven village","talking island","orc village","dark forest","swampland","spider nest","neutral zone"',  // Dark Elven Village
    'gludio,"dwarven village","talking island","orc village","elven forest","elven fortress","neutral zone"',  // Elven Village
    'gludin,"dark elf village","dwarven village","elf village","orc village","elven ruins","singing waterfall","northen territory","obelisk of victory"',  // Talking Island Village
    'giran,oren,dion,aden,goddard,rune,schuttgart,gludio,"giran harbor","field of silence","field of whispers","alligator island","garden of eva"',  // Heine
    'giran,heine,gludio,goddard,rune,schuttgart,aden,oren,"cruma marshland","cruma tower","fortress of resistance","plains of dion","bee hive","tanor canyon"',  // Dion
    'oren,heine,dion,goddard,rune,schuttgart,gludio,aden,"giran harbor","hardins private academy","dragon valley","antharas lair","devils isle","breka stronghold"',  // Giran
    'goddard,oren,giran,heine,schuttgart,dion,gludio,rune,"hunters village","coliseum","forsaken plains","seal of shilen","forest of mirrors","blazing swamp","field of massacre","ancient battleground","silent valley","tower of insolence"',  // Aden
    'gludio,giran,dion,rune,heine,schuttgart,aden,oren,"varka","ketra","hot springs","wall of argos","monastery of silence"',  // Goddard
    'schuttgart,heine,aden,oren,dion,goddard,giran,rune,gludin,"elf village","dark elf village","dwarven village","orc village","ruins of agony","ruins of despair","ant nest","windawood manor"',  // Gludio
    'gludio,"talking island","elf village","dark elf village","dwarven village","orc village","langk lizardman dwellings","windmill hill","fellmere harvesting grounds","forgotten temple","orc barracks","windy hill",wasteland,"red rock ridge"',  // Gludin
    'rune,goddard,aden,oren,heine,giran,dion,gludio,"orc village","dwarven village","den of evil","plunderous plains","frozen labyrinth","crypts of disgrace","pavel ruines"',  // Schuttgart
    'goddard,gludio,giran,dion,heine,schuttgart,aden,oren,"wild beast pastues","valley of saints","forest of the dead","swamp of screams","monasterty of silence"',  // Rune
    'aden,giran,rune,goddard,heine,dion,schuttgart,gludio,"ivory tower","hunters village","hardins private academy","skyshadow meadow","plains of the lizardmen","outlaw forest","sea of spores"',  // Oren
    'aden,oren,"hardins private academy","enchanted valley south","enchanted valley north","forest of mirrors"'  // Hunters Village
  );
  // Array of Newbie Helpers Ids
  nbArr : array[0..8] of integer = (30598, 30599, 30600, 30601, 30602, 32135, 31076, 31077, 32327);

(*-------------- Functions ----------------------------------------------------*)
  procedure TPDelay();
  procedure unlockServer();
  function  GetCity(shouldRecall: Boolean = true; shouldMoveInCity: Boolean = false): TCity;
  procedure Recall(ItemID: Integer = -1; skillID: Integer = -1; shouldMoveInCity: Boolean = false);
  procedure MoveInCity();
  function  GetGatekeeperIDForCity(cityIndex: Integer): Integer;
  function  GetGatekeeperDialogIndexForDestination(cityIndex: Integer; destination: String; out gkId: Integer): Integer;
  function  UseGatekeeper(gkId, dialogIndex: Integer; serverbypass: String = ''): Boolean;
  function  TeleportToLocation(destination: String): Boolean;
  function  TeleportTo(destination: String): Boolean;
  function  GetFirstCityTo(destination: String): Integer;
  function  IsRightCity(current, destination: TCity; shouldRecall: Boolean = true): Boolean;
  function  ToRightCity(destination: TCity): Boolean;
  function  inStartingLocation: Boolean;

implementation

{--------------------------------------------------------------------------------
  Returns true if the character is in one of the starting locations
--------------------------------------------------------------------------------}
function InStartingLocation(): boolean;
begin
  Result :=
   (inRange(User, -124776, 38104, 1208, 2000)       // Kamael
    or inRange(User, -71338, 258271, -3088, 2000)   // Human fighter
    or inRange(User, -90890, 248027, -3570, 2000)   // Human mage
    or inRange(User, 45978, 41196, -3440, 2000)     // Elf
    or inRange(User, 28377, 10916, -4224, 2000)     // Dark elf
    or inRange(User, -56693, -113610, -690, 2000)   // Orc
    or inRange(User, 108516, -174026, -400, 2000)   // Dwarf
  );
end;

procedure TPDelay();
begin
  Delay(TPDelayTime);
end;
{
--------------------------------------------------------------------------------
  Check if the server is locked by trying to move the character.
  If the character didn't move then unlock the server.
--------------------------------------------------------------------------------
}
procedure unlockServer();
var
  pin: Integer;
  Moved: Boolean;
  lastX: Integer;
  newX: Integer;
begin
  Delay(3000); // Wait 3s for the server to load
  lastX := User.X;
  newX  := User.X + 5;
  Engine.MoveTo(newX, User.Y, User.Z);
  if User.InRange(newX, User.Y, User.z, 3, 10) then Moved := true;

  if not Moved then // If it didn't moved it is locked
  begin
    //pin := xxxxxx; // TODO: add configuration for pin
    //Engine.BypassToServer('custom_pin_unlock ' + IntToStr(pin));
  end;
end;
{
--------------------------------------------------------------------------------
  Finds the city in which the character is located
--------------------------------------------------------------------------------
}
function GetCity(shouldRecall: Boolean = True; shouldMoveInCity: Boolean = False): TCity;
var
  City: TCity;
begin
  MyPrint('GetCity(shouldRecall = ' + BoolToStr(shouldRecall) +
    ', shouldMoveInCity = ' + BoolToStr(shouldMoveInCity) + ')');
  City := NON_CITY;
  if User.InRange(147509, 25928, User.Z, 5000, 100)       then City := ADEN;
  if User.InRange(11416, 16856, User.Z, 5000, 100)        then City := DARK_ELVEN;
  if User.InRange(18591, 144708, User.Z, 5000, 100)       then City := DION;
  if User.InRange(116569, -179848, User.Z, 7000, 100)     then City := DWARVEN;
  if User.InRange(44904, 49800, User.Z, 7000, 100)        then City := ELVEN;
  if User.InRange(82876, 148960, User.Z, 5000, 100)       then City := GIRAN;
  if User.InRange(-81311, 152663, User.Z, 5000, 100)      then City := GLUDIN;
  if User.InRange(-14236, 123701, User.Z, 5000, 100)      then City := GLUDIO;
  if User.InRange(147713, -56202, User.Z, 5000, 100)      then City := GODDARD;
  if User.InRange(111434, 220426, User.Z, 5000, 100)      then City := HEINE;
  if User.InRange(117144, 76824, User.Z, 5000, 100)       then City := HUNTER;
  if User.InRange(-45080, -113576, User.Z, 5000, 100)     then City := ORC;
  if User.InRange(81150, 54880, User.Z, 5000, 100)        then City := OREN;
  //if User.InRange(9677, -22176, -3722, 5000, 150)         then City := PRIMEVAL_ISLE;
  if User.InRange(43838, -48222, User.Z, 5000, 100) or
    User.InRange(38283, -48102, User.Z, 5000, 100)        then City := RUNE;
  if User.InRange(88041, -142502, User. Z, 5000, 100)     then City := SHTUTTGART;
  if User.InRange(-83139, 243145, User.Z, 5000, 100)      then City := TALKING_ISLAND;

  // If it isn't in one of the previous locations then Recall and try again
  if (City = NON_CITY) and (shouldRecall) then
  begin
    MyPrint('GetCity: Not in city. Retry');
    Recall(-1, -1, False);
    City := GetCity(false, false); // end recursion
  end;
  // if  shouldMoveInCity  then MoveInCity;  // TODO: fix access violation
  MyPrint('GetCity: in ' + CityNames[City]);
  Result := City;
end;

{
--------------------------------------------------------------------------------
  Different ways to return home
--------------------------------------------------------------------------------
}
procedure  Recall(ItemID: Integer = -1; skillID: Integer = -1; shouldMoveInCity: Boolean = false);
var
  Skill: TL2Skill;
  Item: TL2Item;
  City: TCity;
begin

  if User.Dead then
    Engine.GoHome
  else begin
    // Engine.GoHome(rtclanhall);  // When you die go to clan hall

    MyPrint('Recall: ItemID = ' + IntToStr(ItemID) + ', skillID = ' + IntToStr(skillID) +
      ', shouldMoveInCity = ' + ifThen(shouldMoveInCity, 'True', 'False'));

    // Use the specified item to return to the city
    if  (itemID <> -1)  and  Inventory.User.ByID(itemID, Item)  then
      Engine.UseItem(itemID)

    // Use the specified skill to return to the city
    else if  (skillID <> -1)  and  SkillList.ByID(skillID, Skill)  then
      Engine.UseSkill(skillID)

    // Use SoE it no item or skill provided
    else if  Inventory.User.ByID(AdventurersScrollOfScape, Item)  then
      Engine.UseItem(Item)

    else if  Inventory.User.ByID(ScrollOfScape, Item)  then
      Engine.UseItem(Item)

    else
      Engine.EnterText('/unstuck');  // to enter '/ustuck' in chat window
      // Engine.Unstuck;  // this doesn't work on v1.71

    Delay(500);
    Delay(User.Cast.EndTime);
  end;
  TPDelay;

  if  shouldMoveInCity  then
    MoveInCity;
end;

{
--------------------------------------------------------------------------------
  Move from the city respawns to the gatekeeper
--------------------------------------------------------------------------------
}
procedure  MoveInCity();
var
  City: TCity;
  Moved: Boolean;
  NPC: TL2Npc;
  NewResp: TStringList;
begin
  Print('MoveInCity: get city');
  City := GetCity;
  Moved := False;
{-------------------------------------------------------------------------------
                              Aden
 -------------------------------------------------------------------------------}
  if  CITY = ADEN  then begin
    if User.inrange(146811,27109,-2231,500)  then begin
      Engine.MoveTo(146811,27109,-2231);
      Engine.MoveTo(147289,26926,-2229);
      Engine.MoveTo(147267,26400,-2185);
      Engine.MoveTo(147266,26195,-2103);
      Engine.MoveTo(147250,25969,-2039);
      Engine.MoveTo(147206,25899,-2039);
      Engine.MoveTo(147138,25906,-2039);
    end;
    if User.inrange(146810,28059,-2294,500)  then begin
      Engine.MoveTo(146810,28059,-2294);
      Engine.MoveTo(146847,27874,-2294);
      Engine.MoveTo(147004,27611,-2294);
      Engine.MoveTo(147004,27611,-2294);
      Engine.MoveTo(147004,27611,-2232);
      Engine.MoveTo(147244,26822,-2230);
      Engine.MoveTo(147267,26400,-2185);
      Engine.MoveTo(147266,26195,-2103);
      Engine.MoveTo(147250,25969,-2039);
      Engine.MoveTo(147206,25899,-2039);
      Engine.MoveTo(147138,25906,-2039);
    end;
    if User.inrange(145686,21112,-2167,500)  then begin
      Engine.MoveTo(145686,21112,-2167);
      Engine.MoveTo(145697,21616,-2167);
      Engine.MoveTo(145050,22609,-2167);
      Engine.MoveTo(145218,23947,-2167);
      Engine.MoveTo(146377,24455,-2039);
      Engine.MoveTo(146484,25685,-2039);
      Engine.MoveTo(147130,25700,-2039);
      Engine.MoveTo(147112,25921,-2039);
    end;
    if User.inrange(148076,27069,-2231,500)  then begin
      Engine.MoveTo(148076,27069,-2231);
      Engine.MoveTo(147666,27110,-2230);
      Engine.MoveTo(147308,26954,-2230);
      Engine.MoveTo(147267,26400,-2185);
      Engine.MoveTo(147266,26195,-2103);
      Engine.MoveTo(147250,25969,-2039);
      Engine.MoveTo(147206,25899,-2039);
      Engine.MoveTo(147138,25906,-2039);
    end;
    if User.inrange(148949,21125,-2167,500)  then begin
      Engine.MoveTo(148949,21125,-2167);
      Engine.MoveTo(146122,21227,-2167);
      Engine.MoveTo(145697,21616,-2167);
      Engine.MoveTo(145050,22609,-2167);
      Engine.MoveTo(145218,23947,-2167);
      Engine.MoveTo(146377,24455,-2039);
      Engine.MoveTo(146484,25685,-2039);
      Engine.MoveTo(147130,25700,-2039);
      Engine.MoveTo(147112,25921,-2039);
    end;
    if User.inrange(144549,22828,-2167,500)  then begin
      Engine.MoveTo(144549,22828,-2167);
      Engine.MoveTo(145697,21616,-2167);
      Engine.MoveTo(145050,22609,-2167);
      Engine.MoveTo(145218,23947,-2167);
      Engine.MoveTo(146377,24455,-2039);
      Engine.MoveTo(146484,25685,-2039);
      Engine.MoveTo(147130,25700,-2039);
      Engine.MoveTo(147112,25921,-2039);
    end;
    if User.inrange(144543,24666,-2167,500)  then begin
      Engine.MoveTo(144543,24666,-2167);
      Engine.MoveTo(145279,24307,-2167);
      Engine.MoveTo(146377,24455,-2039);
      Engine.MoveTo(146484,25685,-2039);
      Engine.MoveTo(147130,25700,-2039);
      Engine.MoveTo(147112,25921,-2039);
    end;
    if User.inrange(146497,30582,-2487,500)  then begin
      Engine.MoveTo(146497,30582,-2487);
      Engine.MoveTo(147058,30323,-2487);
      Engine.MoveTo(147427,29959,-2487);
      Engine.MoveTo(147427,29339,-2295);
      Engine.MoveTo(147373,28351,-2294);
      Engine.MoveTo(147100,27643,-2294);
      Engine.MoveTo(147246,26930,-2230);
      Engine.MoveTo(147267,26400,-2185);
      Engine.MoveTo(147266,26195,-2103);
      Engine.MoveTo(147250,25969,-2039);
      Engine.MoveTo(147206,25899,-2039);
      Engine.MoveTo(147138,25906,-2039);
    end;
    if User.inrange(144648,29158,-2487,500)  then begin
      Engine.MoveTo(144648,29158,-2487);
      Engine.MoveTo(144966,28868,-2487);
      Engine.MoveTo(145110,27659,-2295);
      Engine.MoveTo(146220,27622,-2231);
      Engine.MoveTo(147108,27272,-2231);
      Engine.MoveTo(147224,26929,-2230);
      Engine.MoveTo(147267,26400,-2185);
      Engine.MoveTo(147266,26195,-2103);
      Engine.MoveTo(147250,25969,-2039);
      Engine.MoveTo(147206,25899,-2039);
      Engine.MoveTo(147138,25906,-2039);
    end;
    if User.inrange(150247,29109,-2487,500)  then begin
      Engine.MoveTo(150247,29109,-2487);
      Engine.MoveTo(149921,28836,-2487);
      Engine.MoveTo(149859,28063,-2339);
      Engine.MoveTo(149776,27675,-2295);
      Engine.MoveTo(148731,27683,-2231);
      Engine.MoveTo(148224,27383,-2231);
      Engine.MoveTo(147306,26932,-2230);
    end;
    if User.inrange(147848,30309,-2487,500)  then begin
      Engine.MoveTo(147848,30309,-2487);
      Engine.MoveTo(147677,30089,-2487);
      Engine.MoveTo(147462,29870,-2447);
      Engine.MoveTo(147462,29413,-2295);
      Engine.MoveTo(147335,28272,-2294);
      Engine.MoveTo(147108,27664,-2294);
      Engine.MoveTo(147194,26961,-2229);
      Engine.MoveTo(147267,26400,-2185);
      Engine.MoveTo(147266,26195,-2103);
      Engine.MoveTo(147250,25969,-2039);
      Engine.MoveTo(147206,25899,-2039);
      Engine.MoveTo(147138,25906,-2039);
    end;
    if User.inrange(144651,26680,-2295,500)  then begin
      Engine.MoveTo(144651,26680,-2295);
      Engine.MoveTo(144681,27050,-2294);
      Engine.MoveTo(144936,27135,-2295);
      Engine.MoveTo(145145,27605,-2295);
      Engine.MoveTo(146182,27682,-2231);
      Engine.MoveTo(146921,27360,-2231);
      Engine.MoveTo(147218,26948,-2229);
      Engine.MoveTo(147267,26400,-2185);
      Engine.MoveTo(147266,26195,-2103);
      Engine.MoveTo(147250,25969,-2039);
      Engine.MoveTo(147206,25899,-2039);
      Engine.MoveTo(147138,25906,-2039);
    end;
    if User.inrange(148557,30461,-2487,500)  then begin
      Engine.MoveTo(148557,30461,-2487);
      Engine.MoveTo(148114,30076,-2487);
      Engine.MoveTo(147453,30049,-2487);
      Engine.MoveTo(147474,29710,-2368);
      Engine.MoveTo(147397,28461,-2294);
      Engine.MoveTo(147044,27389,-2231);
      Engine.MoveTo(147242,26823,-2230);
      Engine.MoveTo(147267,26400,-2185);
      Engine.MoveTo(147266,26195,-2103);
      Engine.MoveTo(147250,25969,-2039);
      Engine.MoveTo(147206,25899,-2039);
      Engine.MoveTo(147138,25906,-2039);
    end;
    if User.inrange(147971,27982,-2294,500)  then begin
      Engine.MoveTo(147971,27982,-2294);
      Engine.MoveTo(147846,27354,-2231);
      Engine.MoveTo(147265,26878,-2230);
      Engine.MoveTo(147267,26400,-2185);
      Engine.MoveTo(147266,26195,-2103);
      Engine.MoveTo(147250,25969,-2039);
      Engine.MoveTo(147206,25899,-2039);
      Engine.MoveTo(147138,25906,-2039);
    end;
    if User.InRange(147138, 25906, -2039, 500, 150) then Moved := true;
  end;
{------------------------------------------------------------------------------
                                   Dion
 -------------------------------------------------------------------------------}
  if City = DION then begin
    Engine.LoadZone('Locations_Dion_WarriorGuild');
    if  User.InZone  then
    begin
      Print('MoveInCity: inside Warrior Guild');
      Engine.MoveTo(19493, 144560, -3088);
      Engine.MoveTo(19214, 144554, -3096);
      Print('MoveInCity: outside Warrior Guild');
    end;

    Engine.LoadZone('Locations_Dion_Blacksmith');
    if  User.InZone  then
    begin
      Print('MoveInCity: inside Blacksmith');
      Engine.MoveTo(19582, 143166, -3054);
      Engine.MoveTo(19357, 143223, -3032);
      Print('MoveInCity: outside Blacksmith');
    end;

    Engine.LoadZone('Locations_Dion_EquipShop');
    if  User.InZone  then
    begin
      Print('MoveInCity: inside Weapons and Armor Shop');
      Engine.MoveTo(18201, 144662, -3073);
      Engine.MoveTo(18700, 145026, -3120);
      Print('MoveInCity: outside Weapons and Armor Shop');
    end;

    Engine.LoadZone('Locations_Dion_DarkElfGuild');
    if  User.InZone  then
    begin
      Print('MoveInCity: inside Dark Elf Guild');
      Engine.MoveTo(17305, 146796, -3113);
      Engine.MoveTo(17640, 146898, -3120);
      Print('MoveInCity: outside Dark Elf Guild');
    end;

    Engine.LoadZone('Locations_Dion_Grocery');
    if  User.InZone  then
    begin
      Print('MoveInCity: inside Grocery Store');
      Engine.MoveTo(19266, 145703, -3088);
      Engine.MoveTo(19268, 145946, -3088);
      Print('MoveInCity: outside Grocery Store');
    end;

    if  User.InRange(20906, 145721, -3167, 600, 200)  or  User.InRange(19868, 145686, -3128, 600, 200)  then
    begin
      Print('MoveInCity: east side');
      PathMove([20906, 145721, -3167,  19868, 145686, -3128,  19226, 145610, -3104]);
    end;

    if  User.InRange(17649, 146910, -3147, 600, 200)  then
    begin
      Print('MoveInCity: south side');
      Engine.MoveTo(18001, 146054, -3104);
    end;

    if  User.InRange(19072, 143053, -3040, 600, 200) or User.InRange(19079, 144102, -3080, 600, 200)
      or User.InRange(18001, 146054, -3140, 600, 200) or User.InRange(18797, 145015, -3120, 900, 200)
      or User.InRange(16841, 144613, -2996, 600, 400)  then
    begin
      PathMove([19079, 144102,  -3080, 18797, 145015, -3120,
        17600, 145497, -3079,  16468, 144129, -2964,  15628, 142920, -2704]);
    end;

    if  User.InRange(15628, 142920, -2704, 250, 150)  then Moved := true;
  end;
{------------------------------------------------------------------------------
                                 Giran
 -------------------------------------------------------------------------------}
  if CITY = giran then begin
    if User.InRange(81376,148095,-3464, 250, 150) then begin
      Engine.MoveTo(81376,148095,-3464);
      Engine.MoveTo(81881,148025,-3467);
      Engine.MoveTo(83027,148020,-3467);
      Engine.MoveTo(83402,147946,-3403);
    end;
    if User.InRange(82292,149450,-3464, 250, 150) then begin
      Engine.MoveTo(82292,149450,-3464);
      Engine.MoveTo(82865,148876,-3467);
      Engine.MoveTo(83054,148281,-3467);
      Engine.MoveTo(83402,147946,-3403);
    end;
    if User.InRange(81562,147782,-3464, 250, 150) then begin
      Engine.MoveTo(81562,147782,-3464);
      Engine.MoveTo(82284,148077,-3467);
      Engine.MoveTo(83077,148159,-3467);
      Engine.MoveTo(83402,147946,-3403);
    end;
    if User.InRange(83409,148578,-3400, 250, 150) then begin
      Engine.MoveTo(83409,148578,-3400);
      Engine.MoveTo(83427,148206,-3403);
      Engine.MoveTo(83402,147946,-3403);
    end;
    if User.InRange(81440,149119,-3464, 250, 150) then begin
      Engine.MoveTo(81440,149119,-3464);
      Engine.MoveTo(82200,149222,-3467);
      Engine.MoveTo(82722,148485,-3467);
      Engine.MoveTo(83087,148101,-3467);
      Engine.MoveTo(83402,147946,-3403);
    end;
    if User.InRange(82496,148095,-3464, 250, 150) then begin
      Engine.MoveTo(82496,148095,-3464);
      Engine.MoveTo(83092,148094,-3467);
      Engine.MoveTo(83402,147946,-3403);
    end;
    if User.InRange(83473,149223,-3400, 250, 150) then begin
      Engine.MoveTo(83473,149223,-3400);
      Engine.MoveTo(83355,148728,-3403);
      Engine.MoveTo(83358,148292,-3403);
      Engine.MoveTo(83402,147946,-3403);
    end;
    if User.InRange(82272,147801,-3464, 250, 150) then begin
      Engine.MoveTo(82272,147801,-3464);
      Engine.MoveTo(82565,148080,-3467);
      Engine.MoveTo(83101,148099,-3467);
      Engine.MoveTo(83402,147946,-3403);
    end;
    if User.InRange(82480,149087,-3464, 250, 150) then begin
      Engine.MoveTo(82480,149087,-3464);
      Engine.MoveTo(82623,148694,-3467);
      Engine.MoveTo(83087,148157,-3467);
      Engine.MoveTo(83402,147946,-3403);
    end;
    if User.InRange(81637,149427,-3464, 250, 150) then begin
      Engine.MoveTo(81637,149427,-3464);
      Engine.MoveTo(82229,149197,-3467);
      Engine.MoveTo(82610,148669,-3467);
      Engine.MoveTo(83088,148170,-3467);
      Engine.MoveTo(83402,147946,-3403);
    end;
    if User.InRange(81062,148144,-3464, 250, 150) then begin
      Engine.MoveTo(81062,148144,-3464);
      Engine.MoveTo(81574,147997,-3467);
      Engine.MoveTo(82302,147975,-3467);
      Engine.MoveTo(83070,148109,-3467);
      Engine.MoveTo(83402,147946,-3403);
    end;
    if User.InRange(83426,148835,-3400, 250, 150) then begin
      Engine.MoveTo(83426,148835,-3400);
      Engine.MoveTo(83422,148276,-3403);
      Engine.MoveTo(83402,147946,-3403);
    end;
    if User.InRange(81033,148883,-3464, 250, 150) then begin
      Engine.MoveTo(81033,148883,-3464);
      Engine.MoveTo(81769,149191,-3467);
      Engine.MoveTo(82322,149192,-3467);
      Engine.MoveTo(82622,148656,-3467);
      Engine.MoveTo(83079,148163,-3467);
      Engine.MoveTo(83402,147946,-3403);
    end;
    if User.InRange(83415,148235,-3400, 250, 150) then begin
      Engine.MoveTo(83415,148235,-3400);
      Engine.MoveTo(83402,147946,-3403);
    end;
    if User.InRange(83402,147946,-3403,250,150) then Moved := true;
  end;
{------------------------------------------------------------------------------
                                Gludin
 -------------------------------------------------------------------------------}
  if CITY = GLUDIN then begin
    if User.InRange(-82909,150357,-3120, 250, 150) then begin
      Engine.MoveTo(-82909,150357,-3120);
      Engine.MoveTo(-82293,150405,-3127);
      Engine.MoveTo(-81099,150292,-3048);
      Engine.MoveTo(-81073,150110,-3042);
    end;
    if User.InRange(-83520,150560,-3120, 250, 150) then begin
      Engine.MoveTo(-83520,150560,-3120);
      Engine.MoveTo(-82640,150552,-3127);
      Engine.MoveTo(-81440,150392,-3127);
      Engine.MoveTo(-81054,150149,-3042);
      Engine.MoveTo(-81073,150110,-3042);
    end;
    if User.InRange(-82195,150489,-3120, 250, 150) then begin
      Engine.MoveTo(-82195,150489,-3120);
      Engine.MoveTo(-81832,150490,-3101);
      Engine.MoveTo(-81023,150193,-3042);
      Engine.MoveTo(-81073,150110,-3042);
    end;
    if User.InRange(-80053,154348,-3168, 250, 150) then begin
      Engine.MoveTo(-80053,154348,-3168);
      Engine.MoveTo(-80686,153974,-3176);
      Engine.MoveTo(-81784,153952,-3176);
      Engine.MoveTo(-83049,153943,-3176);
      Engine.MoveTo(-83023,152370,-3127);
      Engine.MoveTo(-82637,151293,-3127);
      Engine.MoveTo(-81296,150467,-3127);
      Engine.MoveTo(-81042,150263,-3042);
      Engine.MoveTo(-81073,150110,-3042);
    end;
    if User.InRange(-82035,152647,-3168, 250, 150) then begin
      Engine.MoveTo(-82035,152647,-3168);
      Engine.MoveTo(-82975,152676,-3176);
      Engine.MoveTo(-82932,151752,-3127);
      Engine.MoveTo(-81276,150510,-3127);
      Engine.MoveTo(-81036,150260,-3042);
      Engine.MoveTo(-81073,150110,-3042);
    end;
    if User.InRange(-83529,151205,-3120, 250, 150) then begin
      Engine.MoveTo(-83529,151205,-3120);
      Engine.MoveTo(-82130,150895,-3127);
      Engine.MoveTo(-81088,150361,-3044);
      Engine.MoveTo(-81073,150110,-3042);
    end;
    if User.InRange(-81721,151202,-3120, 250, 150) then begin
      Engine.MoveTo(-81721,151202,-3120);
      Engine.MoveTo(-81403,150675,-3127);
      Engine.MoveTo(-81057,150318,-3042);
      Engine.MoveTo(-81073,150110,-3042);
    end;
    if User.InRange(-82575,151025,-3120, 250, 150) then begin
      Engine.MoveTo(-82575,151025,-3120);
      Engine.MoveTo(-81540,150540,-3127);
      Engine.MoveTo(-80989,150147,-3042);
      Engine.MoveTo(-81073,150110,-3042);
    end;
    if User.InRange(-84064,150864,-3120, 250, 150) then begin
      Engine.MoveTo(-84064,150864,-3120);
      Engine.MoveTo(-83114,150635,-3127);
      Engine.MoveTo(-81390,150478,-3127);
      Engine.MoveTo(-81017,150133,-3042);
      Engine.MoveTo(-81073,150110,-3042);
    end;
    if User.InRange(-82241,151163,-3120, 250, 150) then begin
      Engine.MoveTo(-82241,151163,-3120);
      Engine.MoveTo(-81391,150602,-3127);
      Engine.MoveTo(-80999,150174,-3042);
      Engine.MoveTo(-81073,150110,-3042);
    end;
    if User.InRange(-81787,150780,-3120, 250, 150) then begin
      Engine.MoveTo(-81787,150780,-3120);
      Engine.MoveTo(-81049,150378,-3042);
      Engine.MoveTo(-81073,150110,-3042);
    end;
    if User.InRange(-81073,150110,-3042, 250, 150) then Moved := true;
  end;
{------------------------------------------------------------------------------
                                 Gludio
 -------------------------------------------------------------------------------}
  if CITY = GLUDIO then begin
    if User.InRange(-14704,122032,-3056, 250, 150) then begin
      Engine.MoveTo(-14704,122032,-3056);
      Engine.MoveTo(-14538,122671,-3116);
      Engine.MoveTo(-14599,123458,-3113);
      Engine.MoveTo(-14510,124033,-3125);
    end;
    if User.InRange(-13709,123563,-3112, 250, 150) then begin
      Engine.MoveTo(-13709,123563,-3112);
      Engine.MoveTo(-14115,123802,-3119);
      Engine.MoveTo(-14510,124033,-3125);
    end;
    if User.InRange(-14465,124434,-3120, 250, 150) then begin
      Engine.MoveTo(-14465,124434,-3120);
      Engine.MoveTo(-14510,124033,-3125);
    end;
    if User.InRange(-13513,123752,-3112, 250, 150) then begin
      Engine.MoveTo(-13513,123752,-3112);
      Engine.MoveTo(-14245,123748,-3109);
      Engine.MoveTo(-14510,124033,-3125);
    end;
    if User.InRange(-15564,123896,-3112, 250, 150) then begin
      Engine.MoveTo(-15564,123896,-3112);
      Engine.MoveTo(-14813,123869,-3124);
      Engine.MoveTo(-14510,124033,-3125);
    end;
    if User.InRange(-14288,122752,-3112, 250, 150) then begin
      Engine.MoveTo(-14288,122752,-3112);
      Engine.MoveTo(-14525,123547,-3109);
      Engine.MoveTo(-14510,124033,-3125);
    end;
    if User.InRange(-15314,124131,-3112, 250, 150) then begin
      Engine.MoveTo(-15314,124131,-3112);
      Engine.MoveTo(-14710,123973,-3122);
      Engine.MoveTo(-14510,124033,-3125);
    end;
    if User.InRange(-14592,123232,-3112, 250, 150) then begin
      Engine.MoveTo(-14592,123232,-3112);
      Engine.MoveTo(-14510,124033,-3125);
    end;
    if User.InRange(-14510,124033,-3125, 250, 150) then Moved :=  true;
  end;
{------------------------------------------------------------------------------
                                Goddard
 -------------------------------------------------------------------------------}
  if CITY = GODDARD then begin
    if User.InRange(146272, -58176, -2976, 250, 150) then begin // Near storage
      Engine.MoveTo(147593, -58103, -3007);
      Engine.MoveTo(147727, -57141, -2807);
      Engine.MoveTo(147936, -55368, -2760);
    end;
    if User.InRange(145264, -57680, -2976, 250, 150) then begin // Near storage 2
      Engine.MoveTo(145588, -56926, -3007);
      Engine.MoveTo(146673, -56095, -2807);
      Engine.MoveTo(147543, -56054, -2807);
      Engine.MoveTo(147936, -55368, -2760);
    end;
    if User.InRange(145696, -57696, -2976, 250, 150) then begin // Near storage 3
      Engine.MoveTo(145510, -56930, -3007);
      Engine.MoveTo(146499, -56202, -2807);
      Engine.MoveTo(147481, -56031, -2807);
      Engine.MoveTo(147936, -55368, -2760);
    end;
    if User.InRange(144944, -55392, -2976, 250, 150) then begin // The very edge
      Engine.MoveTo(145153, -56813, -3007);
      Engine.MoveTo(145569, -56855, -3007);
      Engine.MoveTo(146467, -56271, -2807);
      Engine.MoveTo(147566, -56034, -2807);
      Engine.MoveTo(147936, -55368, -2760);
    end;
    if User.InRange(144752, -56752, -2976, 250, 150) then begin // The very edge
      Engine.MoveTo(145534, -56884, -3007);
      Engine.MoveTo(146265, -56418, -2807);
      Engine.MoveTo(147407, -56063, -2807);
      Engine.MoveTo(147936, -55368, -2760);
    end;
    // East stairs
    if User.InRange(149872, -57424, -2976, 250, 150) then begin //
      Engine.MoveTo(149897, -56910, -2979);
      Engine.MoveTo(149230, -56412, -2779);
      Engine.MoveTo(147939, -55999, -2772);
      Engine.MoveTo(147936, -55368, -2760);
    end;
    if User.InRange(149120, -58064, -2976, 250, 150 )then begin // score
      Engine.MoveTo(147706, -58107, -3007);
      Engine.MoveTo(147751, -56737, -2807);
      Engine.MoveTo(147936, -55368, -2760);
    end;
    if User.InRange(150400, -56752, -2976, 250, 150) then begin // The very edge
      Engine.MoveTo(149935, -56870, -3007);
      Engine.MoveTo(149139, -56390, -2807);
      Engine.MoveTo(147929, -56063, -2807);
      Engine.MoveTo(147936, -55368, -2760);
    end;
    if User.InRange(150704, -55744, -2976, 250, 150) then begin // The very edge 2
      Engine.MoveTo(149935, -56870, -3007);
      Engine.MoveTo(149139, -56390, -2807);
      Engine.MoveTo(147929, -56063, -2807);
      Engine.MoveTo(147936, -55368, -2760);
    end;
    if User.InRange(147700, -58400, -2976, 500, 150)  then begin
      Print ('You are in the bottom of the north stairs of Goddard');
      Engine.MoveTo(147727, -57141, -2807);
      Print ('Climbing the stairs')
    end;
    if User.InRange(147727, -57141, -2807, 250, 150)  then begin
      Print ('You are in the top of the north stairs of Goddard');
      Engine.MoveTo(147757, -55301, -2759);
      Print ('Moving to the church');
    end;
    if User.InRange(148288, -58304, -2976, 250, 150) then begin // Bottom center stairs slightly to the right
      Engine.MoveTo(147738, -58050, -3007);
      Engine.MoveTo(147727, -57141, -2807);
      Engine.MoveTo(147936, -55368, -2760);
    end;
    if User.InRange(147232, -58480, -2976, 250, 150) then begin  // Bottom center stairs to the left
      Engine.MoveTo(147677, -58063, -3007);
      Engine.MoveTo(147727, -57141, -2807);
      Engine.MoveTo(147936, -55368, -2760);
    end;
    if User.InRange(149088, -56256, -2776, 250, 150) then begin
      Engine.MoveTo(147854, -56054, -2807);
      Engine.MoveTo(147934, -55354, -2760);
    end;
    // Area
    if User.InRange(146832, -55904, -2776, 250, 150) then begin // Area to the left of the stairs
      Engine.MoveTo(147529, -56046, -2807);
      Engine.MoveTo(147936, -55368, -2760);
    end;
    if User.InRange(146368, -56256, -2776, 250, 150) then begin // Area to the left of the stairs 2
      Engine.MoveTo(147529, -56046, -2807);
      Engine.MoveTo(147936, -55368, -2760);
    end;
    if User.InRange(147664, -56464, -2776, 250, 150) then begin // Center area
      Engine.MoveTo(147936, -55368, -2760);
    end;
    if User.InRange(147680, -56928, -2776, 250, 150) then begin // Center area 2
      Engine.MoveTo(147810, -56110, -2807);
      Engine.MoveTo(147936, -55368, -2760);
    end;
    if User.InRange(148560, -55904, -2776, 250, 150) then begin // Area to the right of the stairs
      Engine.MoveTo(147936, -55368, -2760);
    end;
    // East
    if User.InRange(150200, -57100, -2976, 600, 200) then begin
      Engine.MoveTo(149897, -56910, -2979); // go to the base of the stairs
      Engine.MoveTo(149230, -56412, -2779); // climb the stairs
      Engine.MoveTo(147637, -56074, -2776); // go to the center
      Engine.MoveTo(147728, -55332, -2728); // go to the gatekeeper
    end;
    if User.InRange(144960, -56224, -2976, 250, 150) then begin
      Engine.MoveTo(145458, -56853, -2979);
      Engine.MoveTo(146343, -56326, -2779);
      Engine.MoveTo(147625, -55995, -2772);
      Engine.MoveTo(147936, -55368, -2760); // Move near gk
    end;
    if User.InRange(144496, -55088, -2976, 250, 150) then begin
      Engine.MoveTo(145327, -56873, -2979);
      Engine.MoveTo(146337, -56445, -2779);
      Engine.MoveTo(147533, -55963, -2766);
      Engine.MoveTo(147936, -55368, -2760); // Move near gk
    end;
    if User.InRange(145392, -56960, -2976, 250, 150) then begin
      Engine.MoveTo(146347, -56305, -2779);
      Engine.MoveTo(147514, -56003, -2772);
      Engine.MoveTo(147936, -55368, -2760); // Move near gk
    end;
    if User.InRange (147800, -55300, -2700, 250, 150)  then begin
      MyPrint('MoveInCity: in front of the church');
      Moved :=  true;
    end;
  end;
{------------------------------------------------------------------------------
                                 Hunter
 -------------------------------------------------------------------------------}
  if  City = HUNTER  then
  begin
    if  User.InRange(117016, 78928, -2284, 250, 150)  then
    begin
      MyPrint('MoveInCity: top of south bridge');
      Engine.MoveTo(116245, 77726, -2680);
    end;

    if  User.InRange(115106, 77753, -2704, 500, 200)  then
    begin
      MyPrint('MoveInCity: south-west gate');
      Engine.MoveTo(116117, 77513, -2704);
    end;

    if  User.InRange(115668, 74994, -2620, 600, 200)  then  // north-west gate
    begin
      Engine.MoveTo(115916, 75424, -2592);
      Engine.MoveTo(116588, 76185, -2724);
    end;

    if  User.InRange(116117, 77513, -2704, 500, 200)  // bottom of south bridge
      or  User.InRange(116588, 76185, -2724, 1000, 300)  then  // middle of town
    begin
      Engine.MoveTo(117129, 76917, -2688);
    end;

    if  User.InRange(118284, 74481, -2497, 500, 200)  then
    begin
      MyPrint('MoveInCity: north gate');
      PathMove([118211, 75297, -2640,  117899, 75941, -2696,  117129, 76917, -2688]);
    end;
    if User.InRange(117129, 76917, -2688, 250, 150) then Moved := true;
  end;
{------------------------------------------------------------------------------
                                 Heine
 -------------------------------------------------------------------------------}
  if City = HEINE then begin
    if User.InRange(110912,219584,-3664, 250, 150) then begin
      Engine.MoveTo(110912,219584,-3664);
      Engine.MoveTo(111154,219735,-3675);
      Engine.MoveTo(111176,219395,-3546);
      Engine.MoveTo(111387,219387,-3544);
    end;
    if User.InRange(111888,219584,-3664, 250, 150) then begin
      Engine.MoveTo(111888,219584,-3664);
      Engine.MoveTo(111617,219703,-3674);
      Engine.MoveTo(111591,219371,-3544);
      Engine.MoveTo(111387,219387,-3544);
    end;
    if User.InRange(112064,219792,-3664, 250, 150) then begin
      Engine.MoveTo(112064,219792,-3664);
      Engine.MoveTo(111665,219800,-3675);
      Engine.MoveTo(111580,219329,-3544);
      Engine.MoveTo(111387,219387,-3544);
    end;
    if User.InRange(107808,217856,-3672, 250, 150) then begin
      Engine.MoveTo(107808,217856,-3672);
      Engine.MoveTo(107769,217524,-3673);
      Engine.MoveTo(109387,217509,-3747);
      Engine.MoveTo(110037,217257,-3747);
      Engine.MoveTo(110072,219029,-3477);
      Engine.MoveTo(111202,219130,-3541);
      Engine.MoveTo(111387,219387,-3544);
    end;
    if User.InRange(110896,220768,-3664, 250, 150) then begin
      Engine.MoveTo(110896,220768,-3664);
      Engine.MoveTo(111191,219621,-3663);
      Engine.MoveTo(111190,219303,-3544);
      Engine.MoveTo(111387,219387,-3544);
    end;
    if User.InRange(110768,219824,-3664, 250, 150) then begin
      Engine.MoveTo(110768,219824,-3664);
      Engine.MoveTo(111163,219763,-3671);
      Engine.MoveTo(111199,219319,-3544);
      Engine.MoveTo(111387,219387,-3544);
    end;
    if User.InRange(112112,220576,-3664, 250, 150) then begin
      Engine.MoveTo(112112,220576,-3664);
      Engine.MoveTo(111600,219666,-3669);
      Engine.MoveTo(111586,219305,-3544);
      Engine.MoveTo(111387,219387,-3544);
    end;
    if User.InRange(110688,220576,-3664, 250, 150) then begin
      Engine.MoveTo(110688,220576,-3664);
      Engine.MoveTo(111183,219655,-3669);
      Engine.MoveTo(111201,219292,-3544);
      Engine.MoveTo(111387,219387,-3544);
    end;
    if User.InRange(108032,218048,-3672, 250, 150) then begin
      Engine.MoveTo(108032,218048,-3672);
      Engine.MoveTo(107862,218003,-3673);
      Engine.MoveTo(107840,217532,-3673);
      Engine.MoveTo(109383,217465,-3747);
      Engine.MoveTo(110036,217280,-3747);
      Engine.MoveTo(110096,219040,-3478);
      Engine.MoveTo(111086,219100,-3541);
      Engine.MoveTo(111387,219387,-3544);
    end;
    if User.InRange(107568,218256,-3672, 250, 150) then begin
      Engine.MoveTo(107568,218256,-3672);
      Engine.MoveTo(107542,217872,-3673);
      Engine.MoveTo(107840,217532,-3673);
      Engine.MoveTo(109383,217465,-3747);
      Engine.MoveTo(110036,217280,-3747);
      Engine.MoveTo(110096,219040,-3478);
      Engine.MoveTo(111086,219100,-3541);
      Engine.MoveTo(111387,219387,-3544);
    end;
    if User.InRange(107552,218000,-3672, 250, 150) then begin
      Engine.MoveTo(107552,218000,-3672);
      Engine.MoveTo(107862,218003,-3673);
      Engine.MoveTo(107840,217532,-3673);
      Engine.MoveTo(109383,217465,-3747);
      Engine.MoveTo(110036,217280,-3747);
      Engine.MoveTo(110096,219040,-3478);
      Engine.MoveTo(111086,219100,-3541);
      Engine.MoveTo(111387,219387,-3544);
    end;
    if User.InRange(111856,220752,-3664, 250, 150) then begin
      Engine.MoveTo(111856,220752,-3664);
      Engine.MoveTo(111573,219730,-3675);
      Engine.MoveTo(111589,219342,-3544);
      Engine.MoveTo(111387,219387,-3544);
    end;
    if User.InRange(111387,219387,-3544, 250, 150) then Moved := true;
  end;
{-------------------------------------------------------------------------------
                                 Oren
 -------------------------------------------------------------------------------}
  if CITY = OREN then begin
    if User.InRange(80334,54400,-1552, 250, 150) then begin
      Engine.MoveTo(80334,54400,-1552);
      Engine.MoveTo(80969,53698,-1558);
      Engine.MoveTo(81540,53454,-1494);
      Engine.MoveTo(82480,53340,-1494);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(82323,55466,-1520, 250, 150) then begin
      Engine.MoveTo(82323,55466,-1520);
      Engine.MoveTo(82403,54498,-1523);
      Engine.MoveTo(82589,53861,-1486);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(82123,53535,-1488, 250, 150) then begin
      Engine.MoveTo(82123,53535,-1488);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(80304,56241,-1552, 250, 150) then begin
      Engine.MoveTo(80304,56241,-1552);
      Engine.MoveTo(81470,55682,-1523);
      Engine.MoveTo(82256,55294,-1523);
      Engine.MoveTo(82510,54035,-1494);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(82445,56012,-1520, 250, 150) then begin
      Engine.MoveTo(82445,56012,-1520);
      Engine.MoveTo(82341,54950,-1523);
      Engine.MoveTo(82574,53833,-1486);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(80054,53209,-1552, 250, 150) then begin
      Engine.MoveTo(80054,53209,-1552);
      Engine.MoveTo(80624,53611,-1558);
      Engine.MoveTo(81772,53468,-1494);
      Engine.MoveTo(82289,53472,-1494);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(80513,52980,-1552, 250, 150) then begin
      Engine.MoveTo(80513,52980,-1552);
      Engine.MoveTo(80165,53065,-1558);
      Engine.MoveTo(80630,53610,-1558);
      Engine.MoveTo(81688,53447,-1494);
      Engine.MoveTo(82303,53338,-1494);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(80267,55497,-1552, 250, 150) then begin
      Engine.MoveTo(80267,55497,-1552);
      Engine.MoveTo(80359,54536,-1558);
      Engine.MoveTo(80792,53785,-1558);
      Engine.MoveTo(81495,53421,-1494);
      Engine.MoveTo(82323,53362,-1494);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(79933,55752,-1552, 250, 150) then begin
      Engine.MoveTo(79933,55752,-1552);
      Engine.MoveTo(80349,55208,-1558);
      Engine.MoveTo(80470,54217,-1558);
      Engine.MoveTo(81053,53602,-1558);
      Engine.MoveTo(81974,53465,-1494);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(80594,55837,-1552, 250, 150) then begin
      Engine.MoveTo(80594,55837,-1552);
      Engine.MoveTo(81899,55492,-1523);
      Engine.MoveTo(82240,55142,-1523);
      Engine.MoveTo(82531,53946,-1494);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(82213,53964,-1488, 250, 150) then begin
      Engine.MoveTo(82213,53964,-1488);
      Engine.MoveTo(82668,53709,-1486);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(83327,55410,-1520, 250, 150) then begin
      Engine.MoveTo(83327,55410,-1520);
      Engine.MoveTo(82607,55592,-1523);
      Engine.MoveTo(82184,54809,-1523);
      Engine.MoveTo(82563,53882,-1488);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(79706,52986,-1552, 250, 150) then begin
      Engine.MoveTo(79706,52986,-1552);
      Engine.MoveTo(80427,53549,-1558);
      Engine.MoveTo(80812,53655,-1558);
      Engine.MoveTo(81979,53439,-1494);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(82880,55390,-1520, 250, 150) then begin
      Engine.MoveTo(82880,55390,-1520);
      Engine.MoveTo(82375,55524,-1523);
      Engine.MoveTo(82367,54313,-1493);
      Engine.MoveTo(82651,53734,-1486);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(82552,53447,-1488, 250, 150) then begin
      Engine.MoveTo(82552,53447,-1488);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(82638,53885,-1488, 250, 150) then begin
      Engine.MoveTo(82638,53885,-1488);
      Engine.MoveTo(82950,53186,-1494);
    end;
    if User.InRange(82950,53186,-1494, 250, 150) then Moved :=  true;
  end;
{------------------------------------------------------------------------------
                                  Rune
 -------------------------------------------------------------------------------}
    if CITY = RUNE then begin
      if User.InRange(38608,-47168,896, 250, 150)
          or User.InRange(38272,-49008,896, 250, 150)
          or User.InRange(38752,-47792,896, 250, 150)
          or User.InRange(38112,-49792,896, 250, 150)
          or User.InRange(38848,-48640,896, 250, 150) then
      begin
        Engine.MoveTo(39113,-48225,898);
        Engine.MoveTo(38294,-48089,898);

        NpcList.ByID(31698,NPC);
        Engine.SetTarget(NPC);
        Engine.DlgOpen;
        Delay(500);
        Engine.DlgSel(1);
        Delay(500);
        Engine.DlgSel(1);
        Engine.CancelTarget;
        TPDelay;

        Engine.MoveTo(39522,-48234,-784);
        Engine.MoveTo(41591,-48221,-801);
        Engine.MoveTo(43323,-48185,-795);
        Engine.MoveTo(43827,-47698,-794);
      end;
      if User.InRange(44368,-50592,-792, 250, 150) then begin
        Engine.MoveTo(44368,-50592,-792);
        Engine.MoveTo(43997,-49427,-795);
        Engine.MoveTo(43831,-48480,-795);
        Engine.MoveTo(43827,-47698,-794);
      end;
      if User.InRange(44864,-47824,-792, 250, 150) then begin
        Engine.MoveTo(44864,-47824,-792);
        Engine.MoveTo(44025,-47893,-795);
        Engine.MoveTo(43827,-47698,-794);
      end;
      if User.InRange(43536,-50416,-792, 250, 150) then begin
        Engine.MoveTo(43536,-50416,-792);
        Engine.MoveTo(43833,-49293,-795);
        Engine.MoveTo(43847,-48397,-795);
        Engine.MoveTo(43827,-47698,-794);
      end;
      if User.InRange(45632,-47968,-792, 250, 150) then begin
        Engine.MoveTo(45632,-47968,-792);
        Engine.MoveTo(44070,-47930,-795);
        Engine.MoveTo(43827,-47698,-794);
      end;
      if User.InRange(45824,-49056,-792, 250, 150) then begin
        Engine.MoveTo(45824,-49056,-792);
        Engine.MoveTo(46022,-48351,-795);
        Engine.MoveTo(45441,-48000,-795);
        Engine.MoveTo(44189,-47900,-795);
        Engine.MoveTo(43827,-47698,-794);
      end;
      if User.InRange(44000,-49952,-792, 250, 150) then begin
        Engine.MoveTo(44000,-49952,-792);
        Engine.MoveTo(43862,-48669,-795);
        Engine.MoveTo(43827,-47698,-794);
      end;
      if User.InRange(43792,-48928,-792, 250, 150) then begin
        Engine.MoveTo(43792,-48928,-792);
        Engine.MoveTo(43827,-47698,-794);
      end;
      if User.InRange(45072,-49936,-792, 250, 150) then begin
        Engine.MoveTo(45072,-49936,-792);
        Engine.MoveTo(44258,-49647,-795);
        Engine.MoveTo(43864,-48552,-795);
        Engine.MoveTo(43827,-47698,-794);
      end;
      if User.InRange(43408,-51120,-792, 250, 150) then begin
        Engine.MoveTo(43408,-51120,-792);
        Engine.MoveTo(43805,-49830,-795);
        Engine.MoveTo(43870,-48626,-795);
        Engine.MoveTo(43827,-47698,-794);
      end;
      if User.InRange(43744,-47920,-792, 250, 150) then begin
        Engine.MoveTo(43744,-47920,-792);
        Engine.MoveTo(43827,-47698,-794);
      end;
      if User.InRange(43827,-47698,-794, 250, 150) then Moved :=  true;
    end;
{-------------------------------------------------------------------------------
                               Schuttgart
 -------------------------------------------------------------------------------}
  if CITY = SHTUTTGART then begin
    if User.InRange(87184,-140256,-1536, 250, 150) then begin
      Engine.MoveTo(87184,-140256,-1536);
      Engine.MoveTo(87368,-140838,-1512);
      Engine.MoveTo(87319,-141796,-1338);
      Engine.MoveTo(87145,-142916,-1313);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if User.InRange(87408,-142304,-1336, 250, 150) then begin
      Engine.MoveTo(87408,-142304,-1336);
      Engine.MoveTo(87145,-142916,-1313);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if User.InRange(88240,-142736,-1336, 250, 150) then begin
      Engine.MoveTo(88240,-142736,-1336);
      Engine.MoveTo(87585,-142662,-1338);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if User.InRange(85056,-141328,-1528, 250, 150) then begin
      Engine.MoveTo(85056,-141328,-1528);
      Engine.MoveTo(85181,-141845,-1539);
      Engine.MoveTo(85804,-142279,-1339);
      Engine.MoveTo(87157,-142636,-1338);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if User.InRange(88624,-142480,-1336, 250, 150) then begin
      Engine.MoveTo(88624,-142480,-1336);
      Engine.MoveTo(87548,-142686,-1331);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if User.InRange(86400,-142672,-1336, 250, 150) then begin
      Engine.MoveTo(86400,-142672,-1336);
      Engine.MoveTo(87143,-142570,-1338);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if User.InRange(86560,-140320,-1536, 250, 150) then begin
      Engine.MoveTo(86560,-140320,-1536);
      Engine.MoveTo(87300,-140655,-1539);
      Engine.MoveTo(87385,-141436,-1339);
      Engine.MoveTo(87246,-142537,-1338);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if User.InRange(88448,-140512,-1536, 250, 150) then begin
      Engine.MoveTo(88448,-140512,-1536);
      Engine.MoveTo(87410,-140642,-1539);
      Engine.MoveTo(87299,-141493,-1338);
      Engine.MoveTo(87291,-142607,-1338);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if User.InRange(89712,-141472,-1528, 250, 150) then begin
      Engine.MoveTo(89712,-141472,-1528);
      Engine.MoveTo(89497,-141893,-1539);
      Engine.MoveTo(88963,-142272,-1339);
      Engine.MoveTo(87737,-142631,-1338);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if User.InRange(87344,-141696,-1336, 250, 150) then begin
      Engine.MoveTo(87344,-141696,-1336);
      Engine.MoveTo(87354,-142594,-1338);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if User.InRange(85472,-140752,-1536, 250, 150) then begin
      Engine.MoveTo(85472,-140752,-1536);
      Engine.MoveTo(85191,-141803,-1539);
      Engine.MoveTo(85909,-142322,-1338);
      Engine.MoveTo(87096,-142671,-1338);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if User.InRange(89360,-140944,-1536, 250, 150) then begin
      Engine.MoveTo(89360,-140944,-1536);
      Engine.MoveTo(89539,-141762,-1539);
      Engine.MoveTo(88910,-142276,-1339);
      Engine.MoveTo(87637,-142734,-1332);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if User.InRange(87776,-140384,-1536, 250, 150) then begin
      Engine.MoveTo(87776,-140384,-1536);
      Engine.MoveTo(87403,-140707,-1539);
      Engine.MoveTo(87351,-141645,-1338);
      Engine.MoveTo(87310,-142568,-1338);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if User.InRange(84720,-141936,-1536, 250, 150) then begin
      Engine.MoveTo(84720,-141936,-1536);
      Engine.MoveTo(85201,-141842,-1539);
      Engine.MoveTo(85807,-142262,-1339);
      Engine.MoveTo(87116,-142704,-1338);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if User.InRange(85968,-142384,-1336, 250, 150) then begin
      Engine.MoveTo(85968,-142384,-1336);
      Engine.MoveTo(87116,-142704,-1338);
      Engine.MoveTo(87070,-143418,-1290);
    end;
    if  User.InRange(87342, -142822, -1312, 600, 200)  then
      Engine.MoveTo(87070, -143418, -1290);
    if  User.InRange(87070, -143418, -1290, 250, 150)  then Moved := True;
  end;
{-------------------------------------------------------------------------------
                             Talking Island
 -------------------------------------------------------------------------------}
  if City = TALKING_ISLAND then begin
    if User.InRange(-84376,242824,-3712, 3000, 150) then begin
      Engine.MoveTo(-84184, 243448, -3712);
      Engine.MoveTo(-84280, 243800, -3712);
      Engine.MoveTo(-84552, 244040, -3712);
      Engine.MoveTo(-84184, 244504, -3712);
    end;
    if User.InRange(-84200, 244488, -3728, 500, 150) then Moved := true;
  end;
{-------------------------------------------------------------------------------
                             Dwarven Island
 -------------------------------------------------------------------------------}
  if City = DWARVEN then begin
    // North entrance
    if  User.InRange (116499, -183985, -1588, 500, 150)  then begin
      Engine.MoveTo (116643, -180342, -1360);
      Engine.MoveTo (116322, -179598, -1104);
    end;
    // South entrance
    if  User.InRange (116514, -183912, -1560, 500, 150)  then begin
      Engine.MoveTo (116611, -179919, -1152);
      Engine.MoveTo (116322, -179598, -1104);
    end;
    // In the middle
    if  User.InRange (116666, -179540, -1122, 500, 150)  then begin
      Engine.MoveTo (115698, -178876, -968);
      Engine.MoveTo (116322, -179598, -1104);
    end;
    if User.InRange (116322, -179598, -1104, 500, 150) then Moved := true;
  end;
{-------------------------------------------------------------------------------
                             Dark Elven
 -------------------------------------------------------------------------------}
  if City = DARK_ELVEN then begin
    // Next to newbie guide
    if  User.InRange (12094, 16709, -4580, 500, 150)  then begin
      Engine.MoveTo (11631, 16756, -4656);
      Engine.MoveTo (10759, 16654, -4608);
    end;
    // West entrance
    if  User.InRange (7439, 17778, -4376, 500, 150)  then begin
      Engine.MoveTo (10759, 16654, -4608);
    end;
    // Last turn to gatekeeper
    if  User.InRange (10759, 16654, -4608, 500, 150)  then begin
      Engine.MoveTo (10182, 16799, -4584);
    end;
    if  User.InRange (12094, 16709, -4580, 500, 150)  then Moved := true;
  end;
  if  Moved  then MyPrint('MoveInCity: arrived to gatekeeper')

  { If no movement has taken place in the city
    Create file and save the new respawn location }
  else
  begin
    Print ('MoveInCity: Unknown respawn (' + IntToStr(User.X) + ', ' + IntToStr(User.Y) + ', ' + IntToStr(User.Z) + ')');
    //NewResp := TStringList.Create;
    //if FileExists('File/Script/NewResp.txt') then NewResp.LoadFromFile('File/Script/NewResp.txt');
    //NewResp.Add(City+':'+IntToStr(User.X)+','+IntToStr(User.Y)+','+IntToStr(User.Z));
    //NewResp.SaveToFile('File/Script/NewResp.txt');
    //NewResp.Free;
    Recall(-1, -1, True);
  end;
end;

{ ------------------------------------------------------------------------------
  Look at the destinations of each gatekeeper and return the index corresponding
  to the first gatekeeper from which the location is reachable
  If the location isn't reachable from any gatekeeper it returns -1
 -------------------------------------------------------------------------------}
function  GetFirstCityTo(destination: String): Integer;
var
  i: Integer;
begin
  MyPrint('GetFirstCityTo(' + destination + ')');
  for i:=0 to 15 do
  begin
    if  Pos(destination, GateKeepersStrings[i]) <> 0  then
    begin
      Result := i;
      exit;
    end;
  end;
  MyPrint('GetFirstCityTo: Destination isn''t reachable');
  Result := -1;
end;

{-------------------------------------------------------------------------------
  Then if the city we are in is the destination return True, otherwise return false
 -------------------------------------------------------------------------------}
function  IsRightCity(current, destination: TCity; shouldRecall: boolean = true): boolean;
begin
  Result := False;

  MyPrint('IsRightCity(current = ''' + CityNames[ord(current)] + ''', destination = ''' +
    CityNames[ord(destination)] + ''', shouldRecall = ' + BoolToStr(shouldRecall) + ')');
  if  (current = destination)  then
  begin
    MyPrint('IsRightCity: we are on the destination');
    Result := True;
  end
  else MyPrint('IsRightCity: we are not on the destination');
end;

{-------------------------------------------------------------------------------
  Get the ID of the gatekeeper from the current city
 -------------------------------------------------------------------------------}
function GetGatekeeperIDForCity(cityIndex: Integer): Integer;
begin
  Result := GateKeepers[cityIndex];
end;

{-------------------------------------------------------------------------------
  Get the index of the destination from that gatekeeper
  Return index 0 if destination isn't found
 -------------------------------------------------------------------------------}
function GetGatekeeperDialogIndexForDestination(cityIndex: Integer; destination: String; out gkId: Integer): Integer;
var
  dialogIndex: Integer;
  teleportIndex: TStringList;
begin
  teleportIndex := TStringList.Create;

  {
    Specify the way in which the gatekeeper destinations string is divided,
    And assign to teleportIndex the String with the destinations of the gatekeeper from the current city
  }
  teleportIndex.Delimiter := ',';
  teleportIndex.DelimitedText := GateKeepersStrings[cityIndex];

  dialogIndex := teleportIndex.indexOf(destination) + 1;  // indexOf returns -1 if destination isn't found
  MyPrint('GetGatekeeperDialogIndexForDestination: Dialog Index ' + IntToStr(dialogIndex));

  teleportIndex.Free;
  Result := dialogIndex;
end;

function UseGatekeeper(gkId, dialogIndex: Integer; serverbypass: String = ''): Boolean;
var
  gatekeeper: TL2Live;
begin
  MyPrint('UseGatekeeper: gkId = ' + IntToStr(gkId) + ', dialogIndex = ' + IntToStr(dialogIndex));
  gatekeeper := nil;
  NpcList.ById(gkId, gatekeeper);  // search the gaketeeper by id

  // if we don't find the gatekeeper exit
  if  gatekeeper = nil  then
  begin
    MyPrint('UseGatekeeper: not found');
    exit;
  end;

  MyPrint('UseGatekeeper: teleporting...');
  Engine.SetTarget(gatekeeper);
  Engine.MoveTo(gatekeeper);
  Engine.DlgOpen;
  delay(500);
{
  // TODO: wtf??
  if gatekeeper.id = 30146 then  // MirabelElvenVillageGK := 30146
    Engine.DlgSel(1)
  else
    // Engine.DlgSel(ifThen((Pos(gatekeeper.Name, 'Ragara') <> 0), 'Teleport', GkDlg));
}
  DlgSel(1);
  delay(500);
  Result := DlgSel(dialogIndex, serverbypass);
  TPDelay();
end;

{-------------------------------------------------------------------------------
  Teleports to the destination
 -------------------------------------------------------------------------------}
function  TeleportToLocation(destination: String): boolean;
var
  City: TCity;
  gkId, cityIndex, dialogIndex: integer;
begin
  MyPrint('TeleportToLocation: ''' + destination + '''');
  Result := false;
  City := GetCity;
  cityIndex := Ord(City);

  // If we aren't in a city exit
  if  City = NON_CITY  then
  begin
    MyPrint ('TeleportToLocation: We aren''t in a City');
    exit;
  end;

  dialogIndex := GetGatekeeperDialogIndexForDestination(cityIndex, destination, gkId);

  if dialogIndex = 0 then
  begin
    MyPrint('TeleportToLocation: destination not reachable. Recursively call TeleportTo');
    TeleportTo(destination);
    exit;
  end;

  if dialogIndex > 0 then
  begin
    MyPrint('TeleportToLocation: destination reachable');
    gkId := GetGatekeeperIDForCity(cityIndex);
    Result := UseGatekeeper(gkId, dialogIndex);
  end;
end;

{-------------------------------------------------------------------------------
  Get us to the given city
--------------------------------------------------------------------------------}
function  ToRightCity(destination: TCity): boolean;
var
  current: TCity;
  destinationCity: String;
begin
  // get the ordinal value of the TCity and convert it to string with city names
  destinationCity := CityNames[ord(destination)];
  MyPrint('ToRightCity(destination = ''' + destinationCity + ''')');
  Result := false;

  current := GetCity;
  if  (current = destination)  then
  begin
    MyPrint('ToRightCity: we are on the destination');
    Result := True;
    exit;
  end;
  MyPrint('ToRightCity: we are not on the destination');

  TeleportToLocation(destinationCity);

  MyPrint('ToRightCity: Repeat the process until we are in our destination');
  Result := ToRightCity(destination);
end;

{-------------------------------------------------------------------------------
  Checks if the destination is actually the city to which we want to go.
 -------------------------------------------------------------------------------}
function  TeleportTo(destination: String): boolean;
begin
  Result := false;
  MyPrint('TeleportTo: ''' + destination + '''');
  if  ToRightCity(TCities[GetFirstCityTo(destination)])  then
    Result := TeleportToLocation(destination);
end;

BEGIN
END.
