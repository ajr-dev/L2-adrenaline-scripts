unit uFunctions;

interface

uses
  SysUtils, Classes, uSettings;

(*---------------- Types ------------------------------------------------------*)
type
  DimensionArray = array of array of integer;
  IntArr = array of integer;
  CardArr = array of cardinal;
  ITEM_TYPE = (WEAPON, ARMOR, ACCESSORY);

  TSecondClass = (NONE, FIGHTER, MAGE, WARRIOR, KNIGHT, ROGUE, HEALER, ENCHANTER, SUMMONER, WIZARD);
  TClassType = record
    isMage: boolean;
    secondClass: TSecondClass;
  end;

(*-------------- Constants ----------------------------------------------------*)
const
  TPDelayTime: Integer = 3 * 1000;
{
  IDs of the different classes to determine the buffs needed
  https://l2network.eu/forums/index.php?/topic/1121-l2-class-id/
}
  CLASS_TYPE : array[0..136] of TClassType = (  // all possible classes
  (isMage: false; secondClass: FIGHTER), (isMage: false; secondClass: FIGHTER), (isMage: false; secondClass: WARRIOR),    //   0 =>   2
  (isMage: false; secondClass: WARRIOR), (isMage: false; secondClass: FIGHTER), (isMage: false; secondClass: KNIGHT),     //   3 =>   5
  (isMage: false; secondClass: KNIGHT), (isMage: false; secondClass: FIGHTER), (isMage: false; secondClass: ROGUE),       //   6 =>   8
  (isMage: false; secondClass: ROGUE), (isMage: true; secondClass: MAGE), (isMage: true; secondClass: MAGE),              //   9 =>  11
  (isMage: true; secondClass: WIZARD), (isMage: true; secondClass: WIZARD), (isMage: true; secondClass: SUMMONER),        //  12 =>  14
  (isMage: true; secondClass: MAGE), (isMage: true; secondClass: HEALER), (isMage: true; secondClass: ENCHANTER),         //  15 =>  17
  (isMage: false; secondClass: FIGHTER), (isMage: false; secondClass: FIGHTER), (isMage: false; secondClass: KNIGHT),     //  18 =>  20
  (isMage: false; secondClass: ENCHANTER), (isMage: false; secondClass: FIGHTER), (isMage: false; secondClass: ROGUE),    //  21 =>  23
  (isMage: false; secondClass: ROGUE), (isMage: true; secondClass: MAGE), (isMage: true; secondClass: MAGE),              //  24 =>  26
  (isMage: true; secondClass: WIZARD), (isMage: true; secondClass: SUMMONER), (isMage: true; secondClass: MAGE),          //  27 =>  29
  (isMage: true; secondClass: HEALER), (isMage: false; secondClass: FIGHTER), (isMage: false; secondClass: FIGHTER),      //  30 =>  32
  (isMage: false; secondClass: KNIGHT), (isMage: false; secondClass: ENCHANTER), (isMage: false; secondClass: FIGHTER),   //  33 =>  35
  (isMage: false; secondClass: ROGUE), (isMage: false; secondClass: ROGUE), (isMage: true; secondClass: MAGE),            //  36 =>  38
  (isMage: true; secondClass: MAGE), (isMage: true; secondClass: WIZARD), (isMage: true; secondClass: SUMMONER),          //  39 =>  41
  (isMage: true; secondClass: MAGE), (isMage: true; secondClass: HEALER), (isMage: false; secondClass: FIGHTER),          //  42 =>  44
  (isMage: false; secondClass: FIGHTER), (isMage: false; secondClass: WARRIOR), (isMage: false; secondClass: FIGHTER),    //  45 =>  47
  (isMage: false; secondClass: WARRIOR), (isMage: true; secondClass: MAGE), (isMage: true; secondClass: MAGE),            //  48 =>  50
  (isMage: true; secondClass: ENCHANTER), (isMage: true; secondClass: ENCHANTER), (isMage: false; secondClass: FIGHTER),  //  51 =>  53
  (isMage: false; secondClass: FIGHTER), (isMage: false; secondClass: WARRIOR), (isMage: false; secondClass: FIGHTER),    //  54 =>  56
  (isMage: false; secondClass: WARRIOR), (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE),          //  57 =>  59
  (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE),             //  60 =>  62
  (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE),             //  63 =>  65
  (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE),             //  66 =>  68
  (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE),             //  69 =>  71
  (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE),             //  72 =>  74
  (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE),             //  75 =>  77
  (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE),             //  78 =>  80
  (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE),             //  81 =>  83
  (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE),             //  84 =>  86
  (isMage: false; secondClass: NONE), (isMage: false; secondClass: WARRIOR), (isMage: false; secondClass: WARRIOR),       //  87 =>  89
  (isMage: false; secondClass: KNIGHT), (isMage: false; secondClass: KNIGHT), (isMage: false; secondClass: ROGUE),        //  90 =>  92
  (isMage: false; secondClass: ROGUE), (isMage: true; secondClass: WIZARD), (isMage: true; secondClass: WIZARD),          //  93 =>  95
  (isMage: true; secondClass: SUMMONER), (isMage: true; secondClass: HEALER), (isMage: true; secondClass: SUMMONER),      //  96 =>  98
  (isMage: false; secondClass: KNIGHT), (isMage: false; secondClass: ENCHANTER), (isMage: false; secondClass: ROGUE),     //  99 => 101
  (isMage: false; secondClass: ROGUE), (isMage: true; secondClass: WIZARD), (isMage: true; secondClass: SUMMONER),        // 102 => 104
  (isMage: true; secondClass: HEALER), (isMage: false; secondClass: KNIGHT), (isMage: false; secondClass: ENCHANTER),     // 105 => 107
  (isMage: false; secondClass: ROGUE), (isMage: false; secondClass: ROGUE), (isMage: true; secondClass: WIZARD),          // 108 => 110
  (isMage: true; secondClass: SUMMONER), (isMage: true; secondClass: HEALER), (isMage: false; secondClass: WARRIOR),      // 111 => 113
  (isMage: false; secondClass: WARRIOR), (isMage: true; secondClass: ENCHANTER), (isMage: true; secondClass: ENCHANTER),  // 114 => 116
  (isMage: false; secondClass: WARRIOR), (isMage: false; secondClass: WARRIOR), (isMage: false; secondClass: NONE),       // 117 => 119
  (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE), (isMage: false; secondClass: NONE),             // 120 => 122
  (isMage: false; secondClass: FIGHTER), (isMage: false; secondClass: FIGHTER), (isMage: false; secondClass: FIGHTER),    // 123 => 125
  (isMage: false; secondClass: FIGHTER), (isMage: false; secondClass: WARRIOR),                                           // 126 => 127
  (isMage: true; secondClass: WIZARD), (isMage: true; secondClass: WIZARD),  // 128 => 129 | SLB!!! in original they are WARRIORs
  (isMage: false; secondClass: ROGUE), (isMage: false; secondClass: WARRIOR),                                             // 130 => 131
  (isMage: true; secondClass: WIZARD), (isMage: true; secondClass: WIZARD),  // 132 => 133 | SLB!!! in original they are WARRIORs
  (isMage: false; secondClass: ROGUE), (isMage: false; secondClass: ENCHANTER), (isMage: false; secondClass: ENCHANTER)   // 134 => 135
  );
  WOODENBREASTPLATE = 23;
  WOODENGAITERS = 2386;
  //LEATHERTUNIC = 429; for mages
  //LEATHERSTOCKINGS = 464;
  WOODENHELMET = 43;
  LEATHERSHOES = 37;
  GLOVES = 49;
  COUPON = 7832;

(*-------------- Variables ----------------------------------------------------*)
var
  FIGHTER_NEWBIE_EQUIP : array[0..4] of integer = (23, 2386, 43, 37, 49);
  nbArr : array[0..8] of integer = (30598, 30599, 30600, 30601, 30602, 32135, 31076, 31077, 32327);
  Settings: TSettings;

(*-------------- Functions ----------------------------------------------------*)
  function  DlgSel(Index: Integer; s: String = ''): Boolean; overload;
  function  DlgSel(Caption: String; s: String = ''): Boolean; overload;
  procedure WaitParty;
  procedure TPDelay;
  procedure MyPrint(s: String);
  // procedure  checkForCaptchaThread;
  function  PathMove(path: Array of Integer): boolean;
  procedure MoveAndWait(x, y, z: integer);
  procedure UnlockServer;
  procedure updateState(stateType: string; stateValue: string; value: string); overload;
  procedure updateState(stateType: string; stateValue: string; value: integer); overload;
  function  getState(stateType: string; stateValue: string; value: string): string; overload;
  function  getState(stateType: string; stateValue: string; value: integer): integer; overload;
  function  getState(stateType: string; stateValue: string; value: boolean): boolean; overload;
  function  getArray(stateType: string; stateValue: string; value: string): array of integer;
  procedure writeToArray(var iArray: array of integer; val1, val2, val3: integer);
  function  getClosestLoc(arr: DimensionArray): integer;
  function  distanceBetween(x1, y1, z1, x2, y2, z2: int64): extended;
  function  inRange(obj: TL2Spawn; x1, y1, z1: integer; range: integer): boolean; overload;
  function  inRange(obj: TL2Spawn; iArray: array of integer; range: integer): boolean; overload;
  function  moveTo(iArray: array of integer): boolean;
  function  moveToLoc(coordHolder: DimensionArray): boolean;
  function  revertArray(arr: DimensionArray): DimensionArray;
  function  ifThen(bool: Boolean; valTrue: Integer; valFalse: Integer): Integer; overload;
  function  ifThen(bool: Boolean; valTrue: String; valFalse: String): String; overload;
  function  ifThen(bool: Boolean; valTrue: IntArr; valFalse: IntArr): IntArr; overload;
  function  ifThen(bool: Boolean; valTrue: DimensionArray; valFalse: DimensionArray): DimensionArray; overload;
  procedure equipNewbieItems;
  function  isMage(obj: TL2Char): boolean; overload;
  function  isMage: boolean; overload;
  procedure GetCoupon;
  procedure getShadowWeaponFromCoupon(itemID: integer);
  function  couponItemTaken(itemID: integer): boolean;
  procedure equipItem(itemID: integer);
  function  getNewbieBuffer: TL2Live;
  function  countItems(itemID: integer): integer;
  function  shouldRebuff: boolean;

implementation

procedure TPDelay;
begin
  Delay(TPDelayTime);
end;

procedure MyPrint(s: String);
begin
  Print(s);
  Delay(500);
end;

function DlgSel(index: Integer; s: String = ''): Boolean; Overload;
begin
  Result := False;
  if  ((s <> '')  and  not Engine.BypassToServer(s))  or  not Engine.DlgSel(index)   then
    Print('DlgSel: Couldn''t do dialog selection')
  else  Result := True;
end;

function DlgSel(caption: String; s: String = ''): Boolean; Overload;
begin
  Result := False;
  if  ((s <> '')  and  not Engine.BypassToServer(s))  or  not Engine.DlgSel(caption)   then
    Print('DlgSel: Couldn''t do dialog selection')
  else  Result := True;
end;

{-------------------------------------------------------------------------------
  When a tutorial window appears asking for captcha it plays a sound
  TODO: fix Undeclared identifier TutorialWindow
--------------------------------------------------------------------------------}
{procedure  checkForCaptchaThread;
begin
  while  Engine.Status = lsOnline  do
  begin
    if  Engine.TutorialWindow  then
    begin
      //PlaySound(exepath + '\sounds\' + 'PlayerAlarm'+'.wav');
      PlaySound(exepath + 'beep.wav');
    end;
    Delay(1000);
  end;
end;}

// Move starting near any point of the specified route
function PathMove(path: Array of Integer): Boolean;
var
  i, start: Integer;
begin
  Result := False;

  { first we check that the given route is set correctly
    if the coordinate array is incorrect, then immediately exit }
  if  (Length(path) < 3)  or  (Length(path) mod 3 <> 0)  then exit;

  start := 0;                                                 // set the index of the nearest point by default - 0
  for  i := 0 to Length(path) - 1  do                         // go over the array of coordinates
  begin
    if  (i mod 3 <> 0)  then continue;                        // work only with every third index (we are looking for X coordinates)
    { if the distance to the current point being checked is < distance to the point we marked as the starting point in the route, then
      remember the current point as a new starting point }
    if  (User.DistTo(path[i], path[i+1], path[i+2]) < User.DistTo(path[start], path[start+1], path[start+2]))  then start := i;
  end;

  for  i := start to Length(path) - 1  do begin               // now we are going over the route from the point closest to us and to the end
    if  (i mod 3 <> 0)  then continue;                        // work only with every third index (we are looking for X coordinates)
    if (User.Dead) then
    begin
      Print('PathMoveTo: User Dead');
      Exit;                                                   // if we are dead, stop the function
    end;
    Print('PathMoveTo: ' + IntToStr(i div 3));
    Result := Engine.MoveTo(path[i], path[i+1], path[i+2]);   // move to the coordinates of the next point of the route
  end;
end;

procedure  WaitParty;
var
  i, x1, y1, z1, x2, y2, z2, followDistance: Integer;
  switch: Boolean;
begin
  followDistance := 100;  // This should be greater than the distance set in your bot for your party to follow the leader
  while  not User.Dead  do
  begin
    for  i := 0  to  Party.Chars.Count-1  do
    begin
      x1 := User.X;  y1 := User.Y;  z1 := User.Z;
      x2 := Party.Chars.Items(i).X;
      y2 := Party.Chars.Items(i).Y;
      z2 := Party.Chars.Items(i).Z;
      switch := false;

      if  (distanceBetween (User.X, User.Y, User.Z, Party.Chars.Items(i).X, Party.Chars.Items(i).Y, Party.Chars.Items(i).Z) < 2000)  then
      begin
        // switch bot only if it's on. Gives undeclared GetSaceState
        // if  (Engine.GetFaceState(0) = true)  and  (distanceBetween (x1, y1, z1, x2, y2, z2) > 200)  then
        if  (distanceBetween (User.X, User.Y, User.Z, Party.Chars.Items(i).X, Party.Chars.Items(i).Y, Party.Chars.Items(i).Z) > followDistance)  then
        begin
          Engine.FaceControl (0, false);
          switch := true;
          // print(Party.Chars.Items(i).Name + ' too far');
        end;
        while  not (distanceBetween (User.X, User.Y, User.Z, Party.Chars.Items(i).X, Party.Chars.Items(i).Y, Party.Chars.Items(i).Z) <= followDistance)  do
        begin
          x2 := Party.Chars.Items(i).X;
          y2 := Party.Chars.Items(i).Y;
          z2 := Party.Chars.Items(i).Z;
          Delay (100);
        end;
        // Print(Party.Chars.Items(i).Name + ' close again. Let''s go!');
        Engine.FaceControl (0, true);
        // if  (switch = true)  then
          // Engine.FaceControl (0, true);
      end;
    end;
    Delay (500); // check every half second
  end;
end;

{-------------------------------------------------------------------------------
  Check if the server is locked by trying to move the character.
  If the character didn't move then unlock the server.
 -------------------------------------------------------------------------------}
procedure  UnlockServer;
var
  pin: Integer;
  Moved: Boolean;
  lastX: Integer;
  newX: Integer;
begin
  Delay (3000); // Wait 3s for the server to load
  lastX := User.X;
  newX  := User.X + 5;
  Engine.MoveTo (newX, User.Y, User.Z);
  if User.InRange (newX, User.Y, User.z, 3, 10) then Moved := true;

  // If it didn't moved it is locked
  if  not Moved  then
  begin
    //pin := xxxxxx; // TODO: add configuration for pin
    //Engine.BypassToServer ('custom_pin_unlock ' + IntToStr(pin));
  end;
end;

procedure  MoveAndWait (x, y, z: integer);
var
  i: integer;
  x1, y1, z1: integer;
  x2, y2, z2: integer;
begin
  Engine.MoveTo (x, y, z);
  for  i := 0  to  Party.Chars.Count-1  do
  begin
    x1 := User.X;  y1 := User.Y;  z1 := User.Z;
    x2 := Party.Chars.Items(i).X;
    y2 := Party.Chars.Items(i).Y;
    z2 := Party.Chars.Items(i).Z;

    if  (distanceBetween (x1, y1, z1, x2, y2, z2) < 2000)  then
    begin
      while  not (distanceBetween (x1, y1, z1, x2, y2, z2) < 150)  do
      begin
        x2 := Party.Chars.Items(i).X;
        y2 := Party.Chars.Items(i).Y;
        z2 := Party.Chars.Items(i).Z;
        Delay (100);
      end;
    end;
  end;
end;

procedure updateState(stateType: string; stateValue: string; value: string);
begin
  Settings.SetFile(Script.Path + User.Name + '_Settings.ini');
  Settings.Save(stateType, stateValue, value);
end;

procedure updateState(stateType: string; stateValue: string; value: integer);
begin
  Settings.SetFile(Script.Path + User.Name + '_Settings.ini');
  Settings.Save(stateType, stateValue, value);
end;

function getState(stateType: string; stateValue: string; value: string): string;
begin
  Settings.SetFile(Script.Path + User.Name + '_Settings.ini');
  Result := Settings.Load(stateType, stateValue, value);
end;

function getState(stateType: string; stateValue: string; value: integer): integer;
begin
  Settings.SetFile(Script.Path + User.Name + '_Settings.ini');
  Result := Settings.Load(stateType, stateValue, value);
end;

function getState(stateType: string; stateValue: string; value: boolean): boolean;
begin
  Settings.SetFile(Script.Path + User.Name + '_Settings.ini');
  Result := Settings.LoadBool(stateType, stateValue, BoolToStr(value));
end;

function getArray(stateType: string; stateValue: string; value: string): array of integer;
var
  sl:TStringList;
  i: integer;
  resStr: string;
begin
  sl := TStringList.Create;
  Settings.SetFile(Script.Path + User.Name + '_Settings.ini');
  resStr := Settings.Load(stateType, stateValue, value);
  try
    sl.Delimiter     := ';';
    sl.DelimitedText := resStr;
  SetLength(Result, sl.Count);
  for i:=0 to sl.count-1 do
    Result[i] := StrToInt(sl[i]);

  finally
    sl.Free;
  end;
end;

procedure writeToArray(var iArray: array of integer; val1, val2, val3: integer);
begin
  iArray[0] := val1;
  iArray[1] := val2;
  iArray[2] := val3;
end;

function getClosestLoc(arr: DimensionArray): integer;
var
  i: integer;
  prelimResult: integer;
  prelimLength: integer;
begin
  prelimResult:= 0;
  prelimLength:= High(integer);
  for i:=0 to Length(arr)-1 do
  begin
    if (Trunc(distanceBetween(User.X, User.Y, User.Z,
                  arr[i, 0], arr[i, 1], arr[i, 2])) < prelimLength) then
       begin
        prelimLength := Trunc(distanceBetween(User.X, User.Y, User.Z,
                  arr[i, 0], arr[i, 1], arr[i, 2]));
        prelimResult := i;
       end;
  end;
  Result := prelimResult;
end;

function distanceBetween(x1, y1, z1, x2, y2, z2: int64): extended;
begin
   Result := sqrt(((x2 - x1)*(x2 - x1)) + ((y2 - y1)*(y2 - y1)) + ((z2 - z1)*(z2 - z1)));
end;

function inRange(obj: TL2Spawn; x1, y1, z1: integer; range: integer): boolean;
begin
  Result := (distanceBetween(obj.X, obj.Y, obj.Z, x1, y1, z1) < range);
end;

function inRange(obj: TL2Spawn; iArray: array of integer; range: integer): boolean;
begin
  if Length(iArray) < 3 then
  begin
    Result := false;
    exit;
  end;
  Result := inRange(obj, iArray[0], iArray[1], iArray[2], range);
end;

function moveTo(iArray: array of integer): boolean;
begin
  if Length(iArray) < 3 then
  begin
    Result := false;
    exit;
  end;

  Result := Engine.MoveTo(iArray[0], iArray[1], iArray[2]);
end;

function moveToLoc(coordHolder: DimensionArray): boolean;
var
  i: integer;
  _index: integer;
begin
  _index := 0;
  _index := getClosestLoc(coordHolder);
  if (Length(coordHolder) > 0) then
  begin
    for i:=_index to Length(coordHolder)-1 do
    begin
      if not (Engine.MoveTo(coordHolder[i, 0], coordHolder[i, 1], coordHolder[i, 2])) then
        continue;
    end;
  end;
  Result := true;
end;

function revertArray(arr: DimensionArray): DimensionArray;
var
  i: integer;
begin
  SetLength(Result, Length(arr), 3);
  for i:=0 to Length(Result)-1 do
  begin
    Result[i, 0] := arr[Length(arr)-1 - i, 0];
    Result[i, 1] := arr[Length(arr)-1 - i, 1];
    Result[i, 2] := arr[Length(arr)-1 - i, 2];
  end;
end;

function ifThen(bool: boolean; valTrue: integer; valFalse: integer): integer;
begin
  if bool then
    Result := valTrue
  else
    Result := valFalse;
end;

function ifThen(bool: boolean; valTrue: string; valFalse: string): string;
begin
  if bool then
    Result := valTrue
  else
    Result := valFalse;
end;

function ifThen(bool: boolean; valTrue: IntArr; valFalse: IntArr): IntArr;
begin
  if bool then
    Result := valTrue
  else
    Result := valFalse;
end;

function ifThen(bool: boolean; valTrue: DimensionArray; valFalse: DimensionArray): DimensionArray;
begin
  if bool then
    Result := valTrue
  else
    Result := valFalse;
end;

procedure equipNewbieItems;
var
  i: integer;
  item: TL2Item;
begin
  for i:=0 to 4 do
  begin
    if Inventory.User.ByID(FIGHTER_NEWBIE_EQUIP[i], item) and not item.Equipped then
      Engine.UseItem(FIGHTER_NEWBIE_EQUIP[i]);
  end;
end;

function isMage(obj: TL2Char): boolean;
begin
  Result := CLASS_TYPE[obj.ClassID].isMage;
end;

function isMage: boolean;
begin
  Result := isMage(User);
end;

procedure GetCoupon;
var
  couponItem: TL2Item;
begin
  if getNewbieBuffer = nil then
  begin
    print('GetCoupon: Can''t get coupon, Newbie npc not found');
    exit;
  end;

  Engine.MoveTo(getNewbieBuffer);
  Engine.SetTarget(getNewbieBuffer);
  Engine.DlgOpen;
  delay(500);
  Engine.DlgSel(1);//in HF 7
  delay(500);
  Engine.DlgSel(1);
  delay(500);

  if Inventory.User.ByID(COUPON, couponItem) then
  begin
    updateState('Etc', 'Is coupon taken', 'true');
  end;
end;

procedure getShadowWeaponFromCoupon(itemID: integer);
var
  item: TL2Item;
begin

  Engine.MoveTo(getNewbieBuffer);
  Engine.SetTarget(getNewbieBuffer);
  Engine.DlgOpen;
  Engine.DlgSel(6); //in hf 7
  Engine.DlgSel(2);

  Engine.NpcExchange(itemID, 1);

  while not Inventory.User.ByID(itemID, item) do
  begin
    delay(30);
  end;
end;

function couponItemTaken(itemID: integer): boolean;
var
  item: TL2Item;
begin
  Result := Inventory.User.ByID(itemID, item);
end;

procedure equipItem(itemID: integer);
var
  item: TL2Item;
begin
  if Inventory.User.ByID(itemID, item) and not item.Equipped then
    Engine.UseItem(itemID);
end;

function getNewbieBuffer;
var
  i: integer;
begin
  for i:=0 to 8 do
  begin
    if NpcList.ByID(nbArr[i], Result) then
      exit;
  end;
  Result := nil;
end;

function countItems;
var
  i: integer;
  counter: integer;
begin
  counter := 0;
  for i:=0 to Inventory.User.Count-1 do
  begin
    if Inventory.User.Items(i).ID = itemID then
      inc(counter);
  end;
  Result := counter;
end;

function shouldRebuff;
var
  eff: TL2Buff;
  i: integer;
  effectsArray: array of integer;
begin
  effectsArray := getArray('Effects', 'Effects for check', '0;0');

  if Length(effectsArray) = 0 then
  begin
    Result := false;
    exit;
  end;

  for i:=0 to Length(effectsArray)-1 do
  begin
    if not User.Buffs.ByID(effectsArray[i], eff) or (User.Buffs.ByID(effectsArray[i], eff) and (eff.EndTime <= 10 * 1000)) then
    begin
      print(effectsArray[i]);
      Result := true;
      exit;
    end;
  end;

  Result := false;
end;

BEGIN
END.
